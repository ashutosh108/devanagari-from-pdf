#!/bin/bash
LGREEN='\033[1;32m'
RED='\033[0;31m'
NC='\033[0m' # No Color
# Don't use escape colour codes when stdout (file descriptor 1) is not a terminal.
[ -t 1 ] || LGREEN='' RED='' NC=''
OK="${LGREEN}OK${NC}"
FAIL="${RED}FAIL${NC}"

TESTS="$1"
LINES_GIVEN="$2"
FRAGMENTS="$3"

for BASE_NAME in $FRAGMENTS; do
	if [[ "$VERBOSE" -gt 0 ]]; then
		cat test/$BASE_NAME-in.txt
	fi
	diff -uN test/$BASE_NAME-out.txt <(src/decode-shree-devanagari.py test/$BASE_NAME-in.txt) && RESULT="$OK" || RESULT="$FAIL"
	printf "fragment $BASE_NAME: $RESULT\n"
done

for BASE_NAME in $TESTS; do
	if [ "${BASE_NAME:0:3}" = 'uc-' ]; then
		ARGS='-m'
	else
		ARGS=''
	fi
	for line in $LINES_GIVEN; do
		[ -z "$line" ] && break
		if [[ "$VERBOSE" -gt 0 ]]; then
			echo "$(sed "${line}q;d" sample/$BASE_NAME.txt)"
		fi
		EXPECTED=$(sed "${line}q;d" test/$BASE_NAME-expected.txt)
		diff -u - <<< "$EXPECTED" <(sed "${line}q;d" sample/$BASE_NAME.txt | src/decode-shree-devanagari.py $ARGS -) && RESULT="$OK" || RESULT="$FAIL\n"
		printf "TEST LINE $line of $BASE_NAME:	$RESULT\n"
	done

	# did not get LINES=... argument, so check all lines at once
	if [[ -z "$LINES_GIVEN" ]]; then
		if [[ "$VERBOSE" -gt 0 ]]; then
			cat sample/$BASE_NAME.txt
		fi
		diff -uN test/$BASE_NAME-expected.txt <(src/decode-shree-devanagari.py $ARGS sample/$BASE_NAME.txt) && RESULT="$OK" || RESULT="$FAIL"
		printf "$BASE_NAME: $RESULT\n"
	fi
done
